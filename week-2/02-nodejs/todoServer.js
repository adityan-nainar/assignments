/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by id
    Description: Returns a specific todo item identified by its id.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the id of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by id
    Description: Updates an existing todo item identified by its id.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by id
    Description: Deletes a todo item identified by its id.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  app.use(bodyParser.json());
  
  function generateid(){
    let id;
    do{
        id = Math.round(Math.random()*1000)}
    while( todoList.some(todo => todo.id === id));
    return id;
  }

  const todoList = [];  

  app.get("/todos", (req,res)=>{
    res.status(200).json(todoList)
  })

  app.get("/todos/:id", (req,res)=>{
      const todo = todoList.find(ele=>ele.id === parseInt(req.params.id))
      if(todo){ res.status(200).json(todo) }
      else{ res.status(404).send("Not Found")}
  })

  app.post("/todos", (req,res)=>{
      const newTodo = {};
      newTodo.title = req.body.title,
      newTodo.description = req.body.description,
      newTodo.completed = "false"
      newTodo.id  = generateid();
      todoList.push(newTodo);
      res.status(201).json(newTodo.id)
      console.log(todoList);
  })

  app.put("/todos/:id", (req,res)=>{
      let todoCurrent = todoList.find(ele=> ele.id === parseInt(req.params.id));
      todoCurrent.title = req.body.title;
      todoCurrent.description = req.body.description;
      if(todoCurrent != null){ res.status(200).send()}
      else{ res.status(404).send("Not Found")}
  })

  app.delete("/todos/:id", (req, res)=>{
    let index = todoList.findIndex(ele => ele.id == parseInt(req.params.id))
    todoList.splice(index, index+1)
    if(index != null){res.status(200).send()}
    else{res.status(404).send("Not Found")} 
  })


  module.exports = app;